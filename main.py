import logging
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, filters

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TOKEN = os.environ.get('TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
QUIZ_QUESTION = 0

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (–≤–æ–ø—Ä–æ—Å, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
quiz_data = [
    {"question": "–í –∫–∞–∫–æ–º —Å–ª–æ–≤–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –±—É–∫–≤–∞ –ñ–ò?:\n1) –ø—Ä—É..–∏–Ω–∞\n2) –ª–∞–Ω–¥—ã..\n3) —Å—Ç—Ä–∏..", "correct": 0},
    {"question": "–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–º –º—è–≥–∫–∏–º –∑–Ω–∞–∫–æ–º (—å):\n1) –≤—å—é–≥–∞\n2) –ø–∞–ª—å—Ç–æ\n3) –ø—å–µ—Å–∞", "correct": 2},
    {"question": "–ù–∞–π–¥–∏ –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ:\n1) –≥–æ—Ä–æ–¥\n2) —Ä–µ–∫–∞ –í–æ–ª–≥–∞\n3) —É—á–µ–Ω–∏–∫", "correct": 1}
]

# –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
rules = {
    "–∂–∏_—à–∏": "–°–æ—á–µ—Ç–∞–Ω–∏—è –ñ–ò-–®–ò –ø–∏—à–∏ —Å –±—É–∫–≤–æ–π –ò! –ù–∞–ø—Ä–∏–º–µ—Ä: *–∂–∏*—Ä–∞—Ñ, *—à–∏*–Ω–∞.",
    "—á–∞_—â–∞": "–°–æ—á–µ—Ç–∞–Ω–∏—è –ß–ê-–©–ê –ø–∏—à–∏ —Å –±—É–∫–≤–æ–π –ê! –ù–∞–ø—Ä–∏–º–µ—Ä: *—á–∞*—à–∞, *—â–∞*–≤–µ–ª—å.",
    "—á—É_—â—É": "–°–æ—á–µ—Ç–∞–Ω–∏—è –ß–£-–©–£ –ø–∏—à–∏ —Å –±—É–∫–≤–æ–π –£! –ù–∞–ø—Ä–∏–º–µ—Ä: *—á—É*–¥–æ, *—â—É*–∫–∞.",
    "—á–∫_—á–Ω": "–°–æ—á–µ—Ç–∞–Ω–∏—è –ß–ö, –ß–ù –ø–∏—à—É—Ç—Å—è –±–µ–∑ –º—è–≥–∫–æ–≥–æ –∑–Ω–∞–∫–∞! –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–µ*—á–∫*–∞, —Å—Ç—Ä–∞*—á–Ω*—ã–π.",
    "—å_—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π": "–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π –º—è–≥–∫–∏–π –∑–Ω–∞–∫ (–¨) –ø–∏—à–µ—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –ø–µ—Ä–µ–¥ –±—É–∫–≤–∞–º–∏ –ï, –Å, –Æ, –Ø, –ò. –ù–∞–ø—Ä–∏–º–µ—Ä: –≤*—å*—é–≥–∞, –ª–∏—Å—Ç*—å*—è, –±–µ–ª*—å*—ë."
}

# –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —É—á–µ–±–Ω–∏–∫—É –†–∞–º–∑–∞–µ–≤–æ–π 3 –∫–ª–∞—Å—Å
exercises = {
    "—É–ø—Ä_1_—á–∞—Å—Ç—å1": 
        "**–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–ß–∞—Å—Ç—å 1)**\n–°–ø–∏—à–∏ —Å–ª–æ–≤–∞, –≤—Å—Ç–∞–≤–ª—è—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã:\n"
        "–∂_–≤–æ–π, —à_–Ω–∞, —á_–π–∫–∞, —â_–∫–∞, —á_–¥–æ, —â_–ø–∞–ª—å—Ü—ã\n\n"
        "*–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ '–û—Ç–≤–µ—Ç 1 –ß–∞—Å—Ç—å1'*",
    
    "—É–ø—Ä_2_—á–∞—Å—Ç—å1": 
        "**–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–ß–∞—Å—Ç—å 1)**\n–ù–∞–π–¥–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–Ω–∏ –∏–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ:\n"
        "–≥–æ—Ä–æ–¥ –º–æ—Å–∫–≤–∞, —Ä–µ–∫–∞ –≤–æ–ª–≥–∞, —É—á–µ–Ω–∏–∫ –ø–µ—Ç—è, —Å–æ–±–∞–∫–∞ –∂—É—á–∫–∞\n\n"
        "*–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ '–û—Ç–≤–µ—Ç 2 –ß–∞—Å—Ç—å1'*",
    
    "—É–ø—Ä_1_—á–∞—Å—Ç—å2": 
        "**–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–ß–∞—Å—Ç—å 2)**\n–í—Å—Ç–∞–≤—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π –º—è–≥–∫–∏–π –∑–Ω–∞–∫:\n"
        "–≤_—é–≥–∞, –ª–∏—Å—Ç_—è, –±–µ–ª_—ë, –æ–±_—è–≤–ª–µ–Ω–∏–µ\n\n"
        "*–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ '–û—Ç–≤–µ—Ç 1 –ß–∞—Å—Ç—å2'*",
    
    "—É–ø—Ä_2_—á–∞—Å—Ç—å2": 
        "**–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–ß–∞—Å—Ç—å 2)**\n–°–æ—Å—Ç–∞–≤—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤–∞–º–∏:\n"
        "–ø—å–µ—Å–∞, –≤—å—é–≥–∞, –ø–∞–ª—å—Ç–æ, –ø–µ–Ω—å–∫–∏\n\n"
        "*–°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ '–û—Ç–≤–µ—Ç 2 –ß–∞—Å—Ç—å2'*"
}

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
answers = {
    "–æ—Ç–≤–µ—Ç_1_—á–∞—Å—Ç—å1": 
        "**–û—Ç–≤–µ—Ç –∫ —É–ø—Ä. 1 (–ß–∞—Å—Ç—å 1):**\n"
        "–∂–∏–≤–æ–π, —à–∏–Ω–∞, —á–∞–π–∫–∞, —â—É–∫–∞, —á—É–¥–æ, —â—É–ø–∞–ª—å—Ü—ã\n\n"
        "**–ü—Ä–∞–≤–∏–ª–æ:** –ñ–ò-–®–ò –ø–∏—à–∏ —Å –ò, –ß–ê-–©–ê –ø–∏—à–∏ —Å –ê, –ß–£-–©–£ –ø–∏—à–∏ —Å –£",
    
    "–æ—Ç–≤–µ—Ç_2_—á–∞—Å—Ç—å1": 
        "**–û—Ç–≤–µ—Ç –∫ —É–ø—Ä. 2 (–ß–∞—Å—Ç—å 1):**\n"
        "–≥–æ—Ä–æ–¥ *–ú–æ—Å–∫–≤–∞*, —Ä–µ–∫–∞ *–í–æ–ª–≥–∞*, —É—á–µ–Ω–∏–∫ *–ü–µ—Ç—è*, —Å–æ–±–∞–∫–∞ *–ñ—É—á–∫–∞*\n\n"
        "**–ü—Ä–∞–≤–∏–ª–æ:** –ò–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∏—à—É—Ç—Å—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã",
    
    "–æ—Ç–≤–µ—Ç_1_—á–∞—Å—Ç—å2": 
        "**–û—Ç–≤–µ—Ç –∫ —É–ø—Ä. 1 (–ß–∞—Å—Ç—å 2):**\n"
        "–≤*—å*—é–≥–∞, –ª–∏—Å—Ç*—å*—è, –±–µ–ª*—å*—ë, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n\n"
        "**–ü—Ä–∞–≤–∏–ª–æ:** –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π –¨ –ø–∏—à–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ï, –Å, –Æ, –Ø, –ò",
    
    "–æ—Ç–≤–µ—Ç_2_—á–∞—Å—Ç—å2": 
        "**–û—Ç–≤–µ—Ç –∫ —É–ø—Ä. 2 (–ß–∞—Å—Ç—å 2):**\n"
        "1. –ú—ã —Å–º–æ—Ç—Ä–µ–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é *–ø—å–µ—Å—É* –≤ —Ç–µ–∞—Ç—Ä–µ.\n"
        "2. –°–∏–ª—å–Ω–∞—è *–≤—å—é–≥–∞* –∑–∞–º–µ–ª–∞ –≤—Å–µ –¥–æ—Ä–æ–≥–∏.\n" 
        "3. –¢—ë–ø–ª–æ–µ *–ø–∞–ª—å—Ç–æ* –≤–∏—Å–µ–ª–æ –≤ —à–∫–∞—Ñ—É.\n"
        "4. –í –ª–µ—Å—É –º—ã –Ω–∞—à–ª–∏ —Å—Ç–∞—Ä—ã–µ *–ø–µ–Ω—å–∫–∏*."
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
    keyboard = [['üìö –ü—Ä–∞–≤–∏–ª–∞', 'üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞', 'üìñ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    user_name = update.message.from_user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è 3 –∫–ª–∞—Å—Å–∞.\n"
        "–Ø –º–æ–≥—É:\n‚Ä¢ üìö –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞\n‚Ä¢ üéØ –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n‚Ä¢ üìñ –î–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=reply_markup
    )

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
    keyboard = [['üìö –ü—Ä–∞–≤–∏–ª–∞', 'üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞', 'üìñ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_rules_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∞–≤–∏–ª"""
    keyboard = [[rule] for rule in rules.keys()] + [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª–æ:", reply_markup=reply_markup)

async def send_rule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ"""
    user_choice = update.message.text
    if user_choice in rules:
        await update.message.reply_text(rules[user_choice], parse_mode='Markdown')
    else:
        await update.message.reply_text("–ü–æ–∫–∞ —Ç–∞–∫–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

async def show_exercises_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    keyboard = [
        ['–£–ø—Ä 1 –ß–∞—Å—Ç—å1', '–£–ø—Ä 2 –ß–∞—Å—Ç—å1'],
        ['–£–ø—Ä 1 –ß–∞—Å—Ç—å2', '–£–ø—Ä 2 –ß–∞—Å—Ç—å2'],
        ['–û—Ç–≤–µ—Ç 1 –ß–∞—Å—Ç—å1', '–û—Ç–≤–µ—Ç 2 –ß–∞—Å—Ç—å1'],
        ['–û—Ç–≤–µ—Ç 1 –ß–∞—Å—Ç—å2', '–û—Ç–≤–µ—Ç 2 –ß–∞—Å—Ç—å2'],
        ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç:", reply_markup=reply_markup)

async def send_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"""
    exercise_map = {
        '–£–ø—Ä 1 –ß–∞—Å—Ç—å1': '—É–ø—Ä_1_—á–∞—Å—Ç—å1',
        '–£–ø—Ä 2 –ß–∞—Å—Ç—å1': '—É–ø—Ä_2_—á–∞—Å—Ç—å1',
        '–£–ø—Ä 1 –ß–∞—Å—Ç—å2': '—É–ø—Ä_1_—á–∞—Å—Ç—å2',
        '–£–ø—Ä 2 –ß–∞—Å—Ç—å2': '—É–ø—Ä_2_—á–∞—Å—Ç—å2'
    }
    
    user_choice = update.message.text
    if user_choice in exercise_map:
        await update.message.reply_text(exercises[exercise_map[user_choice]], parse_mode='Markdown')
    else:
        await update.message.reply_text("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def send_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"""
    answer_map = {
        '–û—Ç–≤–µ—Ç 1 –ß–∞—Å—Ç—å1': '–æ—Ç–≤–µ—Ç_1_—á–∞—Å—Ç—å1',
        '–û—Ç–≤–µ—Ç 2 –ß–∞—Å—Ç—å1': '–æ—Ç–≤–µ—Ç_2_—á–∞—Å—Ç—å1', 
        '–û—Ç–≤–µ—Ç 1 –ß–∞—Å—Ç—å2': '–æ—Ç–≤–µ—Ç_1_—á–∞—Å—Ç—å2',
        '–û—Ç–≤–µ—Ç 2 –ß–∞—Å—Ç—å2': '–æ—Ç–≤–µ—Ç_2_—á–∞—Å—Ç—å2'
    }
    
    user_choice = update.message.text
    if user_choice in answer_map:
        await update.message.reply_text(answers[answer_map[user_choice]], parse_mode='Markdown')
    else:
        await update.message.reply_text("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    context.user_data['quiz_score'] = 0
    context.user_data['current_question'] = 0
    keyboard = [['1', '2', '3'], ['‚ùå –í—ã–π—Ç–∏ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    first_question = quiz_data[0]["question"]
    await update.message.reply_text(
        f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –û—Ç–≤–µ—á–∞–π, –≤—ã–±–∏—Ä–∞—è —Ü–∏—Ñ—Ä—É –æ—Ç–≤–µ—Ç–∞.\n\n{first_question}",
        reply_markup=reply_markup
    )
    return QUIZ_QUESTION

async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
    user_answer = update.message.text
    current_index = context.user_data['current_question']

    if user_answer == '‚ùå –í—ã–π—Ç–∏ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã':
        await end_quiz(update, context)
        return ConversationHandler.END

    try:
        chosen_answer = int(user_answer) - 1
        correct_index = quiz_data[current_index]["correct"]

        if chosen_answer == correct_index:
            context.user_data['quiz_score'] += 1
            message = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_index + 1}"

        context.user_data['current_question'] += 1
        next_index = context.user_data['current_question']

        if next_index < len(quiz_data):
            next_question = quiz_data[next_index]["question"]
            await update.message.reply_text(f"{message}\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{next_question}")
            return QUIZ_QUESTION
        else:
            await end_quiz(update, context)
            return ConversationHandler.END

    except (ValueError, IndexError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç 1, 2 –∏–ª–∏ 3.")

async def end_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    score = context.user_data['quiz_score']
    total = len(quiz_data)
    await update.message.reply_text(
        f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total}.",
        reply_markup=ReplyKeyboardRemove()
    )
    await show_menu(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é"""
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
    await show_menu(update, context)
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cancel", cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Regex('^üìö –ü—Ä–∞–≤–∏–ª–∞$'), show_rules_menu))
    application.add_handler(MessageHandler(filters.Regex('^(–∂–∏_—à–∏|—á–∞_—â–∞|—á—É_—â—É|—á–∫_—á–Ω|—å_—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π)$'), send_rule))
    application.add_handler(MessageHandler(filters.Regex('^üìñ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è$'), show_exercises_menu))
    application.add_handler(MessageHandler(filters.Regex('^(–£–ø—Ä 1 –ß–∞—Å—Ç—å1|–£–ø—Ä 2 –ß–∞—Å—Ç—å1|–£–ø—Ä 1 –ß–∞—Å—Ç—å2|–£–ø—Ä 2 –ß–∞—Å—Ç—å2)$'), send_exercise))
    application.add_handler(MessageHandler(filters.Regex('^(–û—Ç–≤–µ—Ç 1 –ß–∞—Å—Ç—å1|–û—Ç–≤–µ—Ç 2 –ß–∞—Å—Ç—å1|–û—Ç–≤–µ—Ç 1 –ß–∞—Å—Ç—å2|–û—Ç–≤–µ—Ç 2 –ß–∞—Å—Ç—å2)$'), send_answer))
    application.add_handler(MessageHandler(filters.Regex('^‚Ü©Ô∏è –ù–∞–∑–∞–¥$'), show_menu))

    # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
    quiz_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞$'), start_quiz)],
        states={
            QUIZ_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quiz_answer)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(quiz_conv)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
    # ==================================================
# –í–ù–ò–ú–ê–ù–ò–ï: –≠–¢–û–¢ –ö–û–î –ó–ê–©–ò–©–ï–ù –û–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ô
# 
# –ß—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è:
# 1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ç–∫—É (fork)
# 2. –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
# 3. –°–æ–∑–¥–∞–π—Ç–µ pull request
# 4. –ñ–¥–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞
#
# –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã!
# ==================================================
