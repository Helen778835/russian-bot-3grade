import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, filters

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç @BotFather
TOKEN = "8407138634:AAHF7EcnFxNK5CHfq3o7GXNU0A8eRzb3c7o"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler (–¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã)
QUIZ_QUESTION = 0

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (–≤–æ–ø—Ä–æ—Å, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
quiz_data = [
    {"question": "–í –∫–∞–∫–æ–º —Å–ª–æ–≤–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –±—É–∫–≤–∞ –ñ–ò?:\n1) –ø—Ä—É..–∏–Ω–∞\n2) –ª–∞–Ω–¥—ã..\n3) —Å—Ç—Ä–∏..", "correct": 1},
    {"question": "–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–º –º—è–≥–∫–∏–º –∑–Ω–∞–∫–æ–º (—å):\n1) –≤—å—é–≥–∞\n2) –ø–∞–ª—å—Ç–æ\n3) –ø—å–µ—Å–∞", "correct": 1},
    {"question": "–ù–∞–π–¥–∏ –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ:\n1) –≥–æ—Ä–æ–¥\n2) —Ä–µ–∫–∞ –í–æ–ª–≥–∞\n3) —É—á–µ–Ω–∏–∫", "correct": 2}
]

# –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
rules = {
    "–∂–∏_—à–∏": "–°–æ—á–µ—Ç–∞–Ω–∏—è –ñ–ò-–®–ò –ø–∏—à–∏ —Å –±—É–∫–≤–æ–π –ò! –ù–∞–ø—Ä–∏–º–µ—Ä: *–∂–∏*—Ä–∞—Ñ, *—à–∏*–Ω–∞.",
    "—á–∞_—â–∞": "–°–æ—á–µ—Ç–∞–Ω–∏—è –ß–ê-–©–ê –ø–∏—à–∏ —Å –±—É–∫–≤–æ–π –ê! –ù–∞–ø—Ä–∏–º–µ—Ä: *—á–∞*—à–∞, *—â–∞*–≤–µ–ª—å.",
    "—á—É_—â—É": "–°–æ—á–µ—Ç–∞–Ω–∏—è –ß–£-–©–£ –ø–∏—à–∏ —Å –±—É–∫–≤–æ–π –£! –ù–∞–ø—Ä–∏–º–µ—Ä: *—á—É*–¥–æ, *—â—É*–∫–∞.",
    "—á–∫_—á–Ω": "–°–æ—á–µ—Ç–∞–Ω–∏—è –ß–ö, –ß–ù –ø–∏—à—É—Ç—Å—è –±–µ–∑ –º—è–≥–∫–æ–≥–æ –∑–Ω–∞–∫–∞! –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–µ*—á–∫*–∞, —Å—Ç—Ä–∞*—á–Ω*—ã–π.",
    "—å_—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π": "–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π –º—è–≥–∫–∏–π –∑–Ω–∞–∫ (–¨) –ø–∏—à–µ—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –ø–µ—Ä–µ–¥ –±—É–∫–≤–∞–º–∏ –ï, –Å, –Æ, –Ø, –ò. –ù–∞–ø—Ä–∏–º–µ—Ä: –≤*—å*—é–≥–∞, –ª–∏—Å—Ç*—å*—è, –±–µ–ª*—å*—ë."
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    keyboard = [['üìö –ü—Ä–∞–≤–∏–ª–∞', 'üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ...')
    user_name = update.message.from_user.first_name
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è 3 –∫–ª–∞—Å—Å–∞.\n"
        "–Ø –º–æ–≥—É:\n"
        "‚Ä¢ üìö –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞\n"
        "‚Ä¢ üéØ –ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–±–æ–ª—å—à—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=reply_markup
    )

async def show_rules_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
    keyboard = [[rule] for rule in rules.keys()] + [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å:", reply_markup=reply_markup)

async def send_rule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ"""
    user_choice = update.message.text
    if user_choice in rules:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (parse_mode='Markdown')
        await update.message.reply_text(rules[user_choice], parse_mode='Markdown')
    else:
        await update.message.reply_text("–ü–æ–∫–∞ —Ç–∞–∫–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    context.user_data['quiz_score'] = 0
    context.user_data['current_question'] = 0
    keyboard = [['1', '2', '3'], ['‚ùå –í—ã–π—Ç–∏ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    first_question = quiz_data[0]["question"]
    await update.message.reply_text(
        f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –û—Ç–≤–µ—á–∞–π, –≤—ã–±–∏—Ä–∞—è —Ü–∏—Ñ—Ä—É –æ—Ç–≤–µ—Ç–∞.\n\n{first_question}",
        reply_markup=reply_markup
    )
    return QUIZ_QUESTION

async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"""
    user_answer = update.message.text
    current_index = context.user_data['current_question']

    if user_answer == '‚ùå –í—ã–π—Ç–∏ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã':
        await end_quiz(update, context)
        return ConversationHandler.END

    try:
        chosen_answer = int(user_answer) - 1  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –∏–Ω–¥–µ–∫—Å—É (0, 1, 2)
        correct_index = quiz_data[current_index]["correct"]

        if chosen_answer == correct_index:
            context.user_data['quiz_score'] += 1
            message = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_index + 1}"

        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        context.user_data['current_question'] += 1
        next_index = context.user_data['current_question']

        if next_index < len(quiz_data):
            next_question = quiz_data[next_index]["question"]
            await update.message.reply_text(f"{message}\n\n–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:\n{next_question}")
            return QUIZ_QUESTION
        else:
            await end_quiz(update, context)
            return ConversationHandler.END

    except (ValueError, IndexError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç 1, 2 –∏–ª–∏ 3.")

async def end_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    score = context.user_data['quiz_score']
    total = len(quiz_data)
    keyboard = [['üìö –ü—Ä–∞–≤–∏–ª–∞', 'üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total}.",
        reply_markup=reply_markup
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
    await start(update, context)
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cancel", cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–≤–∏–ª–∞"
    application.add_handler(MessageHandler(filters.Regex('^üìö –ü—Ä–∞–≤–∏–ª–∞$'), show_rules_menu))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
    application.add_handler(MessageHandler(filters.Regex('^(–∂–∏_—à–∏|—á–∞_—â–∞|—á—É_—â—É|—á–∫_—á–Ω|—å_—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π)$'), send_rule))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    application.add_handler(MessageHandler(filters.Regex('^‚Ü©Ô∏è –ù–∞–∑–∞–¥$'), start))

    # ConversationHandler –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    quiz_conversation = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞$'), start_quiz)],
        states={
            QUIZ_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quiz_answer)],
        },
        fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Regex('^‚ùå –í—ã–π—Ç–∏ –∏–∑ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã$'), cancel)]
    )
    application.add_handler(quiz_conversation)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()"# ÅÆ‚ ‡†°Æ‚†•‚ ®·Ø‡†¢≠Æ" 
